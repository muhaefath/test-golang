// Code generated by MockGen. DO NOT EDIT.
// Source: modules/client/handler.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	json "encoding/json"
	reflect "reflect"
	client "tiktok-connector/modules/client"

	gomock "github.com/golang/mock/gomock"
	models "phabricator.sirclo.com/source/Hercules.git/models"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockHandler) CreateProduct(ctx context.Context, createProductReq client.CreateProductRequest, credentials models.Credentials) (*client.CreateProductResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, createProductReq, credentials)
	ret0, _ := ret[0].(*client.CreateProductResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockHandlerMockRecorder) CreateProduct(ctx, createProductReq, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockHandler)(nil).CreateProduct), ctx, createProductReq, credentials)
}

// EndpointPassthrough mocks base method.
func (m *MockHandler) EndpointPassthrough(ctx context.Context, credentials models.Credentials, method, path string, queryParams map[string]string, body interface{}) (json.RawMessage, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointPassthrough", ctx, credentials, method, path, queryParams, body)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EndpointPassthrough indicates an expected call of EndpointPassthrough.
func (mr *MockHandlerMockRecorder) EndpointPassthrough(ctx, credentials, method, path, queryParams, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointPassthrough", reflect.TypeOf((*MockHandler)(nil).EndpointPassthrough), ctx, credentials, method, path, queryParams, body)
}

// GetAttribute mocks base method.
func (m *MockHandler) GetAttribute(ctx context.Context, categoryID string, credentials models.Credentials) (*client.GetAttributeResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttribute", ctx, categoryID, credentials)
	ret0, _ := ret[0].(*client.GetAttributeResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAttribute indicates an expected call of GetAttribute.
func (mr *MockHandlerMockRecorder) GetAttribute(ctx, categoryID, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttribute", reflect.TypeOf((*MockHandler)(nil).GetAttribute), ctx, categoryID, credentials)
}

// GetCategory mocks base method.
func (m *MockHandler) GetCategory(ctx context.Context, credentials models.Credentials) (*client.GetCategoryResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, credentials)
	ret0, _ := ret[0].(*client.GetCategoryResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockHandlerMockRecorder) GetCategory(ctx, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockHandler)(nil).GetCategory), ctx, credentials)
}

// GetCategoryRule mocks base method.
func (m *MockHandler) GetCategoryRule(ctx context.Context, categoryID string, credentials models.Credentials) (*client.GetCategoryRuleResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryRule", ctx, categoryID, credentials)
	ret0, _ := ret[0].(*client.GetCategoryRuleResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCategoryRule indicates an expected call of GetCategoryRule.
func (mr *MockHandlerMockRecorder) GetCategoryRule(ctx, categoryID, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryRule", reflect.TypeOf((*MockHandler)(nil).GetCategoryRule), ctx, categoryID, credentials)
}

// GetOrderDetail mocks base method.
func (m *MockHandler) GetOrderDetail(ctx context.Context, request client.GetOrderDetailRequest, credentials models.Credentials) (*client.GetOrderDetailResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetail", ctx, request, credentials)
	ret0, _ := ret[0].(*client.GetOrderDetailResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrderDetail indicates an expected call of GetOrderDetail.
func (mr *MockHandlerMockRecorder) GetOrderDetail(ctx, request, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetail", reflect.TypeOf((*MockHandler)(nil).GetOrderDetail), ctx, request, credentials)
}

// GetOrderList mocks base method.
func (m *MockHandler) GetOrderList(ctx context.Context, request client.GetOrderListRequest, credentials models.Credentials) (*client.GetOrderListResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderList", ctx, request, credentials)
	ret0, _ := ret[0].(*client.GetOrderListResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrderList indicates an expected call of GetOrderList.
func (mr *MockHandlerMockRecorder) GetOrderList(ctx, request, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderList", reflect.TypeOf((*MockHandler)(nil).GetOrderList), ctx, request, credentials)
}

// GetProductDetail mocks base method.
func (m *MockHandler) GetProductDetail(ctx context.Context, productID string, credentials models.Credentials) (*client.GetProductDetailResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductDetail", ctx, productID, credentials)
	ret0, _ := ret[0].(*client.GetProductDetailResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProductDetail indicates an expected call of GetProductDetail.
func (mr *MockHandlerMockRecorder) GetProductDetail(ctx, productID, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductDetail", reflect.TypeOf((*MockHandler)(nil).GetProductDetail), ctx, productID, credentials)
}

// GetProductList mocks base method.
func (m *MockHandler) GetProductList(ctx context.Context, getProductList client.GetProductListRequest, credentials models.Credentials) (*client.GetProductListResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductList", ctx, getProductList, credentials)
	ret0, _ := ret[0].(*client.GetProductListResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProductList indicates an expected call of GetProductList.
func (mr *MockHandlerMockRecorder) GetProductList(ctx, getProductList, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductList", reflect.TypeOf((*MockHandler)(nil).GetProductList), ctx, getProductList, credentials)
}

// GetShopID mocks base method.
func (m *MockHandler) GetShopID(ctx context.Context, credentials models.Credentials) (*client.GetShopIDResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShopID", ctx, credentials)
	ret0, _ := ret[0].(*client.GetShopIDResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetShopID indicates an expected call of GetShopID.
func (mr *MockHandlerMockRecorder) GetShopID(ctx, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopID", reflect.TypeOf((*MockHandler)(nil).GetShopID), ctx, credentials)
}

// ShipOrder mocks base method.
func (m *MockHandler) ShipOrder(ctx context.Context, request client.ShipOrderRequest, credentials models.Credentials) (*client.GeneralResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShipOrder", ctx, request, credentials)
	ret0, _ := ret[0].(*client.GeneralResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ShipOrder indicates an expected call of ShipOrder.
func (mr *MockHandlerMockRecorder) ShipOrder(ctx, request, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShipOrder", reflect.TypeOf((*MockHandler)(nil).ShipOrder), ctx, request, credentials)
}

// ShipPackage mocks base method.
func (m *MockHandler) ShipPackage(ctx context.Context, request client.ShipPackageRequest, credentials models.Credentials) (*client.ShipPackageResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShipPackage", ctx, request, credentials)
	ret0, _ := ret[0].(*client.ShipPackageResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ShipPackage indicates an expected call of ShipPackage.
func (mr *MockHandlerMockRecorder) ShipPackage(ctx, request, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShipPackage", reflect.TypeOf((*MockHandler)(nil).ShipPackage), ctx, request, credentials)
}

// UpdateStock mocks base method.
func (m *MockHandler) UpdateStock(ctx context.Context, request client.UpdateStockRequest, credentials models.Credentials) (*client.UpdateStockResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStock", ctx, request, credentials)
	ret0, _ := ret[0].(*client.UpdateStockResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateStock indicates an expected call of UpdateStock.
func (mr *MockHandlerMockRecorder) UpdateStock(ctx, request, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStock", reflect.TypeOf((*MockHandler)(nil).UpdateStock), ctx, request, credentials)
}

// UploadImg mocks base method.
func (m *MockHandler) UploadImg(ctx context.Context, uploadImgReq client.UploadImgRequest, credentials models.Credentials) (*client.UploadImgResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImg", ctx, uploadImgReq, credentials)
	ret0, _ := ret[0].(*client.UploadImgResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadImg indicates an expected call of UploadImg.
func (mr *MockHandlerMockRecorder) UploadImg(ctx, uploadImgReq, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImg", reflect.TypeOf((*MockHandler)(nil).UploadImg), ctx, uploadImgReq, credentials)
}
