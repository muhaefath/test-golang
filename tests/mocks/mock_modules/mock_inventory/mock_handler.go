// Code generated by MockGen. DO NOT EDIT.
// Source: modules/inventory/handler.go

// Package mock_inventory is a generated GoMock package.
package mock_inventory

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	requests "phabricator.sirclo.com/source/Hercules.git/controllers/requests"
	responses "phabricator.sirclo.com/source/Hercules.git/controllers/responses"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// UpdateStockChannel mocks base method.
func (m *MockHandler) UpdateStockChannel(request requests.UpdateStockRequest) (*responses.UpdateStockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStockChannel", request)
	ret0, _ := ret[0].(*responses.UpdateStockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStockChannel indicates an expected call of UpdateStockChannel.
func (mr *MockHandlerMockRecorder) UpdateStockChannel(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStockChannel", reflect.TypeOf((*MockHandler)(nil).UpdateStockChannel), request)
}
