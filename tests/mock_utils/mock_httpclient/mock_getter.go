// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sirclo/go/src/Hercules/utils/httpclient/getter.go

// Package mock_httpclient is a generated GoMock package.
package mock_httpclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHttpGetter is a mock of HttpGetter interface.
type MockHttpGetter struct {
	ctrl     *gomock.Controller
	recorder *MockHttpGetterMockRecorder
}

// MockHttpGetterMockRecorder is the mock recorder for MockHttpGetter.
type MockHttpGetterMockRecorder struct {
	mock *MockHttpGetter
}

// NewMockHttpGetter creates a new mock instance.
func NewMockHttpGetter(ctrl *gomock.Controller) *MockHttpGetter {
	mock := &MockHttpGetter{ctrl: ctrl}
	mock.recorder = &MockHttpGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpGetter) EXPECT() *MockHttpGetterMockRecorder {
	return m.recorder
}

// GetAndSaveFile mocks base method.
func (m *MockHttpGetter) GetAndSaveFile(ctx context.Context, fileURL, activityID string, counter int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndSaveFile", ctx, fileURL, activityID, counter)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAndSaveFile indicates an expected call of GetAndSaveFile.
func (mr *MockHttpGetterMockRecorder) GetAndSaveFile(ctx, fileURL, activityID, counter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndSaveFile", reflect.TypeOf((*MockHttpGetter)(nil).GetAndSaveFile), ctx, fileURL, activityID, counter)
}

// GetFileBytes mocks base method.
func (m *MockHttpGetter) GetFileBytes(ctx context.Context, fileURL string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileBytes", ctx, fileURL)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileBytes indicates an expected call of GetFileBytes.
func (mr *MockHttpGetterMockRecorder) GetFileBytes(ctx, fileURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileBytes", reflect.TypeOf((*MockHttpGetter)(nil).GetFileBytes), ctx, fileURL)
}
