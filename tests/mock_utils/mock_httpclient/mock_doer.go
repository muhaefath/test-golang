// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sirclo/go/src/Hercules/utils/httpclient/doer.go

// Package mock_httpclient is a generated GoMock package.
package mock_httpclient

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	httpclient "test-golang/utils/httpclient"
)

// MockHttpDoer is a mock of HttpDoer interface.
type MockHttpDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpDoerMockRecorder
}

// MockHttpDoerMockRecorder is the mock recorder for MockHttpDoer.
type MockHttpDoerMockRecorder struct {
	mock *MockHttpDoer
}

// NewMockHttpDoer creates a new mock instance.
func NewMockHttpDoer(ctrl *gomock.Controller) *MockHttpDoer {
	mock := &MockHttpDoer{ctrl: ctrl}
	mock.recorder = &MockHttpDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpDoer) EXPECT() *MockHttpDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpDoer) Do(ctx context.Context, req *http.Request) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Do indicates an expected call of Do.
func (mr *MockHttpDoerMockRecorder) Do(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpDoer)(nil).Do), ctx, req)
}

// SetTimeout mocks base method.
func (m *MockHttpDoer) SetTimeout(duration string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTimeout", duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockHttpDoerMockRecorder) SetTimeout(duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockHttpDoer)(nil).SetTimeout), duration)
}

// MockProxiedHttpDoer is a mock of ProxiedHttpDoer interface.
type MockProxiedHttpDoer struct {
	ctrl     *gomock.Controller
	recorder *MockProxiedHttpDoerMockRecorder
}

// MockProxiedHttpDoerMockRecorder is the mock recorder for MockProxiedHttpDoer.
type MockProxiedHttpDoerMockRecorder struct {
	mock *MockProxiedHttpDoer
}

// NewMockProxiedHttpDoer creates a new mock instance.
func NewMockProxiedHttpDoer(ctrl *gomock.Controller) *MockProxiedHttpDoer {
	mock := &MockProxiedHttpDoer{ctrl: ctrl}
	mock.recorder = &MockProxiedHttpDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxiedHttpDoer) EXPECT() *MockProxiedHttpDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockProxiedHttpDoer) Do(ctx context.Context, req *http.Request) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Do indicates an expected call of Do.
func (mr *MockProxiedHttpDoerMockRecorder) Do(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockProxiedHttpDoer)(nil).Do), ctx, req)
}

// SetTimeout mocks base method.
func (m *MockProxiedHttpDoer) SetTimeout(duration string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTimeout", duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockProxiedHttpDoerMockRecorder) SetTimeout(duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockProxiedHttpDoer)(nil).SetTimeout), duration)
}

// WithProxyAuthHeader mocks base method.
func (m *MockProxiedHttpDoer) WithProxyAuthHeader(value string) (httpclient.ProxiedHttpDoer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithProxyAuthHeader", value)
	ret0, _ := ret[0].(httpclient.ProxiedHttpDoer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithProxyAuthHeader indicates an expected call of WithProxyAuthHeader.
func (mr *MockProxiedHttpDoerMockRecorder) WithProxyAuthHeader(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithProxyAuthHeader", reflect.TypeOf((*MockProxiedHttpDoer)(nil).WithProxyAuthHeader), value)
}
